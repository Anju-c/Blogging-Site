// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User{
  id Int @id @default(autoincrement()) //primary key
  name String
  email String @unique
  password String
  blogs Blog[]
   replies   Reply[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  followers Follow[] @relation("User Follows",fields:[],references: [])
  following Follow[] @relation("user following",fields:[],references: [])
}
model Follow{
   id Int @default(autoincrement()) @unique
   followid Int
   followerid Int 
   follow User @relation("User Follows",fields:[followid],references:[id])
   followers User @relation("user following",fields:[followerid],references:[id])
}
model Blog{
  id Int @id @default(autoincrement())
  title String
  content String
  userId Int
  author User @relation(fields:[userId],references: [id])
   replies   Reply[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  
}
model Reply{
  id  Int @id @default(autoincrement()) 
  content   String 
  userId Int
  author User @relation(fields:[userId],references: [id])
  blogId Int
  blog Blog @relation(fields: [blogId],references: [id])
  parentId Int?
  
 
  parent Reply? @relation("ReplytoReply",fields:[parentId],references: [id])
  children  Reply[]  @relation("ReplytoReply")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())


}